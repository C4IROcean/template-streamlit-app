name: Docker Image CI

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - reopened

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v3
      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            oceandata.azurecr.io/{{cookiecutter.project_slug}}
          tags: |
            type=sha,prefix=,suffix=,format=long
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          flavor: |
            latest=true
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - uses: azure/docker-login@v1
        with:
          login-server: oceandata.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        env:
          DOCKER_BUILDKIT: 1
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-dev:
    needs: build-and-push
    runs-on: ubuntu-latest

    if: github.event_name == 'pull_request'
    environment:
      name: dev
      url: https://{{cookiecutter.url_prefix}}.dev.oceandata.xyz

    steps:
      - name: AZ CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Get EAS secrets
        id: eas-secrets
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: "kv-dev-main"
          secrets: "eas-config-token-encrypt,eas-config-token-sign,eas-encrypt-iv-secret,eas-traefik-client-password"
      - name: Set AKS context
        uses: azure/aks-set-context@v2
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP_NAME }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
      - name: Prepare Python
        run: python -m pip install -U pip setuptools wheel
      - name: Install poetry
        run: python -m pip install poetry
      - name: Checkout Agent Ocean
        uses: actions/checkout@v3
        with:
          repository: C4IROcean/agent-ocean
          path: agent-ocean
          ssh-key: ${{ secrets.AGENT_OCEAN_DEPLOY_KEY }}
      - name: Install dependencies
        run: cd agent-ocean && poetry install
      - name: Checkout App
        uses: actions/checkout@v3
        with:
          path: app
      - name: Deploy app
        run: |
          cd $GITHUB_WORKSPACE/agent-ocean && poetry run python -m odp.app.deployer -f $GITHUB_WORKSPACE/app/deployment_config.yml --env-name=dev --update-if-exists --image-tag=${{ needs.build-and-push.outputs.tag }}
        env:
          ENVIRONMENT: dev
          PROXY_SSL_DOMAIN: "*.dev.oceandata.xyz"
          PROXY_CERT_RESOLVER: letsencrypt
          AUTH_EAS_URL: "eas.dev.oceandata.xyz"
          AUTH_DOMAIN: "dev.oceandata.xyz"
          EAS_CLIENT_SECRET:
            ${{ steps.eas-secrets.outputs.eas-traefik-client-password }}
          EAS_ENCRYPT_SECRET:
            ${{ steps.eas-secrets.outputs.eas-config-token-encrypt }}
          EAS_SIGN_SECRET:
            ${{ steps.eas-secrets.outputs.eas-config-token-sign }}
          EAS_IV_SECRET: ${{ steps.eas-secrets.outputs.eas-encrypt-iv-secret }}
          MANAGED_BY: "cicd-agent"

  deploy-prod:
    needs: build-and-push
    runs-on: ubuntu-latest

    if: github.event.ref == 'refs/heads/master'
    environment:
      name: prod
      url: https://{{cookiecutter.url_prefix}}.prod.oceandata.xyz

    steps:
      - name: AZ CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Get EAS secrets
        id: eas-secrets
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: "kv-prod-main"
          secrets: "eas-config-token-encrypt,eas-config-token-sign,eas-encrypt-iv-secret,eas-traefik-client-password"
      - name: Set AKS context
        uses: azure/aks-set-context@v2
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP_NAME }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
      - name: Prepare Python
        run: python -m pip install -U pip setuptools wheel
      - name: Install poetry
        run: python -m pip install poetry
      - name: Checkout Agent Ocean
        uses: actions/checkout@v3
        with:
          repository: C4IROcean/agent-ocean
          path: agent-ocean
          ssh-key: ${{ secrets.AGENT_OCEAN_DEPLOY_KEY }}
      - name: Install dependencies
        run: cd agent-ocean && poetry install
      - name: Checkout App
        uses: actions/checkout@v3
        with:
          path: app
      - name: Deploy app
        run: |
          cd $GITHUB_WORKSPACE/agent-ocean && poetry run python -m odp.app.deployer -f $GITHUB_WORKSPACE/app/deployment_config.yml --env-name=prod --update-if-exists --image-tag=${{ needs.build-and-push.outputs.tag }}
        env:
          ENVIRONMENT: prod
          PROXY_SSL_DOMAIN: "*.prod.oceandata.xyz"
          PROXY_CERT_RESOLVER: letsencrypt
          AUTH_EAS_URL: "eas.prod.oceandata.xyz"
          AUTH_DOMAIN: "prod.oceandata.xyz"
          EAS_CLIENT_SECRET:
            ${{ steps.eas-secrets.outputs.eas-traefik-client-password }}
          EAS_ENCRYPT_SECRET:
            ${{ steps.eas-secrets.outputs.eas-config-token-encrypt }}
          EAS_SIGN_SECRET:
            ${{ steps.eas-secrets.outputs.eas-config-token-sign }}
          EAS_IV_SECRET: ${{ steps.eas-secrets.outputs.eas-encrypt-iv-secret }}
          MANAGED_BY: "cicd-agent"
